events {}

http {

    # Inclui os tipos de arquivos, caso essa configuração não seja definida tudo será considerado text/plain
    # O mime.types contém o detalhamento dos tipos de arquivos.
    include mime.types;

    # O contexto server é responsavel por definir um virtual host
    server {

        # Define a porta do virtual host
        listen 80;
        # Define o ip do servidor
        server_name 127.0.0.1;

        # Em caso de arquivos estaticos define o caminho base no servidor
        # (Esse caminho está sendo alimentado por um volume do docker)
        root /sites/demo;


        # A diretriz try_files tem o seguinte comportamento: 
        # Ele pode receber um numero indefinido de argumentos, para cada argumento exceto o ultimo
        # ele vai tentar encontrar um arquivo estático com o caminho informado no argumento, caso
        # ele percorra toda a lista de argumentos e não encontre nenhum arquivo, ele vai ser redirecionado
        # com o comportamento do rewrite para a location informada no ultimo argumento.
        try_files $uri /cat.png /theme.css @friendly_404;

        # É comum o uso de variaveis nos argumentos do try_files, no caso estamos usando o $uri
        # para verificar se o caminho utilizado pelo usuário é um arquivo.


        # Dessa vez estamos definindo uma location por um nome e não por uma uri
        # assim podemos apenas chama-la por meio de diretrizes sem mapear uma rota acessivel
        # para o cliente.
        # Isso pode ser chamado de named location
        location @friendly_404 {
            return 404 "Sorry this file could not be found.";
        }

       
    }

}