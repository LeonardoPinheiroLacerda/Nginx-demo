events {}

http {

    # Inclui os tipos de arquivos, caso essa configuração não seja definida tudo será considerado text/plain
    # O mime.types contém o detalhamento dos tipos de arquivos.
    include mime.types;

    # O contexto server é responsavel por definir um virtual host
    server {

        # Define a porta do virtual host
        listen 80;
        # Define o ip do servidor
        server_name 127.0.0.1;

        # Em caso de arquivos estaticos define o caminho base no servidor
        # (Esse caminho está sendo alimentado por um volume do docker)
        root /sites/demo;


        # Prefix match... caso seja chamado "/greeting" também irá bater nessa location
        location /greet {
            return 200 'Hello from NGINX "/greet" location (Prefix)';
        }

        # Exact match... irá bater aqui apenas se a requisição for exatamente igual a "/greet"
        location = /greet {
            return 200 'Hello from NGINX "/greet" location (Exact)';
        }

        # REGEX match... caso a URL respeite a expressão regular irá cair aqui
        location ~ /greet[0-9] {
            return 200 'Hello from NGINX "/greet" location (REGEX)';
        }

        # REGEX match... caso a URL respeite a expressão regular sem sensentive case irá cair aqui
        location ~* /greet[0-9] {
            return 200 'Hello from NGINX "/greet" location (REGEX INSENSITIVE CASE)';
        }

        # Preferential Prefix match... funciona como prefix, porém prioridade acima de outros mapeamentos
        location ^~ /Greet2 {
            return 200 'Hello from NGINX "/greet" location (Preferential prefix)';
        }

        # Ordem de prioridade de cada tipo de location:
        # 1 - Exact
        # 2 - Preferential Prefix
        # 3 - REGEX
        # 4 - Prefix

    }

}