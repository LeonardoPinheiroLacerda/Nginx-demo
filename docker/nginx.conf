# Usuário responsavel pelos workers
# user root;

# Quantidade de workers (default 1) o indicado é termos o mesmo número de workers que temos de cores no processador
# se passarmos auto ele já vai instanciar um worker por core, mas para sabermos quantos cores tem o nosso servidor podemos
# utilizar o comando 'nproc'
worker_processes auto;

events {
    # Quantidade de conexões que cada worker pode ter simultaneamente.
    # Para encontrarmos a quantidade de arquivos que o processador pode abrir simultaneamente
    # utiliza o comando 'ulimit -n'.
    # Esse será o valor ideal para essa diretriz.
    worker_connections 1024;
}

http {

    # Inclui os tipos de arquivos, caso essa configuração não seja definida tudo será considerado text/plain
    # O mime.types contém o detalhamento dos tipos de arquivos.
    include mime.types;

    # O contexto server é responsavel por definir um virtual host
    server {

        # Define a porta do virtual host
        listen 80;
        # Define o ip do servidor
        server_name 127.0.0.1;

        # Em caso de arquivos estaticos define o caminho base no servidor
        # (Esse caminho está sendo alimentado por um volume do docker)
        root /sites/demo;


        # ---------- Exemplo 01 ----------
        # Adicionando um header para a resposta
        location = /hello-world {
            add_header my_header 'hello world';
        }

        # ---------- Exemplo 02 ----------
        # Adicionado headers que dizem ao cliente salvar em cache o recurso enviado.
        # No caso estou usando uma expressão regular para filtrar pela extensão do arquivo
        # mas poderia ser uma location comum também.
        location  ~* \.(css|js|jpg|png|jpeg)$ {
            access_log off;

            add_header Cache-Control public;
            add_header Pragma public;
            add_header Vary Accept-Encoding;
            expires 1M;
        }

    }

}