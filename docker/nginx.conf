# Usuário responsavel pelos workers
# user root;

# Quantidade de workers (default 1) o indicado é termos o mesmo número de workers que temos de cores no processador
# se passarmos auto ele já vai instanciar um worker por core, mas para sabermos quantos cores tem o nosso servidor podemos
# utilizar o comando 'nproc'
worker_processes auto;

# Como no momento da configuração do módulo, foi configurado como dynamic, precisamos importar o mesmo
# para usar suas diretivas
# Por algum motivo foi necessário usar o caminha absoluto, caso alguem consiga resolver, por favor fazer um pull request!
load_module /etc/nginx/modules/ngx_http_image_filter_module.so;

events {
    # Quantidade de conexões que cada worker pode ter simultaneamente.
    # Para encontrarmos a quantidade de arquivos que o processador pode abrir simultaneamente
    # utiliza o comando 'ulimit -n'.
    # Esse será o valor ideal para essa diretriz.
    worker_connections 1024;
}

http {

    # Inclui os tipos de arquivos, caso essa configuração não seja definida tudo será considerado text/plain
    # O mime.types contém o detalhamento dos tipos de arquivos.
    include mime.types;

    # O contexto server é responsavel por definir um virtual host
    server {

        # Define a porta do virtual host
        listen 80;
        # Define o ip do servidor
        server_name 127.0.0.1;

        # Em caso de arquivos estaticos define o caminho base no servidor
        # (Esse caminho está sendo alimentado por um volume do docker)
        root /sites/demo;

        # Os modulos são adicionados na instalação... então nesse exemplo estaremos auterando o Dockerfile também...

        # Para testarmos o modulo, iremos usar uma diretiva para alterar a imagem retornada na rota
        # /thumb.png
        location = /thumb.png {
            # Essa diretiva pertence ao modulo configurado, e gira a imagem em 180 graus
            image_filter rotate 180;
        }

        # Para checar a documentação de todos os modulos checar no link: http://nginx.org/en/docs/

    }

}